-- phpMyAdmin SQL Dump
-- version 5.2.2
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Jun 02, 2025 at 05:59 PM
-- Server version: 10.6.21-MariaDB-cll-lve
-- PHP Version: 8.3.20

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `netopyadb`
--

-- --------------------------------------------------------

--
-- Table structure for table `articles`
--

CREATE TABLE `articles` (
  `id` int(10) NOT NULL,
  `title` varchar(1000) NOT NULL,
  `user_id` int(10) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT current_timestamp(),
  `overfold_content` mediumtext NOT NULL,
  `content` mediumtext NOT NULL,
  `ogimage_url` varchar(1000) NOT NULL,
  `ogdescription` mediumtext NOT NULL,
  `gallery_id` int(11) NOT NULL,
  `tag` varchar(5) NOT NULL,
  `feature_clip` varchar(500) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `articles`
--

INSERT INTO `articles` (`id`, `title`, `user_id`, `timestamp`, `overfold_content`, `content`, `ogimage_url`, `ogdescription`, `gallery_id`, `tag`, `feature_clip`) VALUES
(1, 'Hello World!', 1, '2013-05-29 17:45:11', '<div class=\"centered_image\"><img src=\"article_images/thb_1_n.jpg\" class=\"img-thumbnail\"/></div><p>Hello everyone! I\'m Michael (aka Netopya) a university engineering student from Canada and this is my blog. I have a few projects I work on that I\'d love to share with you along with other discoveries I make from the work of technology and science. Whats that device in the picture? Stay tuned and I\'ll get to that and more as my blog comes to life!</p>', '', 'http://www.netopyaplanet.com/article_images/thb_1_n.jpg', 'Hello everyone! I\'m Michael (aka Netopya) a university engineering student from Canada and this is my blog. I have a few projects I work on that I\'d love to share with you along with other discoveries I make from the work of technology and science. Whats that device in the picture? Stay tuned and I\'ll get to that and more as my blog comes to life!', 0, 'PROJ', 'images/features/fea_thb_1_n.jpg'),
(2, 'DIY Charging Station', 1, '2013-07-20 23:48:38', '<div class=\"centered_image\"><a href=\"gallery_images/2/full/full_IMG_5757.JPG\"><img src=\"gallery_images/2/lrg/lrg_IMG_5757.JPG\" class=\"img-thumbnail\"/></a></div>\r\n									<p>Let\'s start off with something a little different that has nothing to do with the programming or technology that I\'m used to. All of us have encountered the dreadful spaghetti of wires while charging our devices. I\'ve seen many people\'s solutions to taming the situation on the web and thought I\'d try my own take to the problem. Continue reading and join me as I tread for the first time into the art of woodworking.</p>', '<span class=\"forv\">Materials:</span>\r\n										<ul>\r\n											<li>&frac12; and &frac14; inch plywood</li>\r\n											<li>Plastic wood</li>\r\n											<li>Wood stain</li>\r\n											<li>Decorative fabric</li>\r\n											<li>Wood glue</li>\r\n											<li>Charging accessories</li>\r\n										</ul>\r\n										<span class=\"forv\">Tools:</span>\r\n										<ul>\r\n											<li>Jig saw, circular saw</li>\r\n											<li>Drill</li>\r\n											<li>Palm sander</li>\r\n										</ul>\r\n										<span class=\"forv\">Time to complete: About 3 Days</span>\r\n									\r\n									\r\n									\r\n									<p>Firstly I brought an aspect of computing into my project, CAD. I designed the station I had in mind with my favorite and familiar software Autodesk Inventor. I also created models of the chargers I was going to use along with the devices I will charge which were an iPod Touch and a Sony Ericsson T715 for space allocation purposes. I tried to make the station as small as possible but quickly realized that it was going to bigger than what I had in mind. Undeterred, I was able to use the program to find and correct problems, such as the power bricks blocking holes that I intended to pass wires through and not having enough room to slide and mount the power bar. Finally creating drafts of the parts allowed me to easily transfer dimensions to the wood I was going to cut.</p>\r\n									<div class=\"centered_image\"><a href=\"gallery_images/2/full/full_Charger2_2.png\"><img class=\"img-thumbnail\" src=\"gallery_images/2/lrg/lrg_Charger2_2.png\"/></a></div>\r\n									<p>Now for the hands on part of the project. I cut all pieces according to the drafts and sanded all the corners. I assembled the four base pieces and the tray with simple screws through pre-drilled holes. Next I filled in all the gaps and cleaned up my mistakes by applying plastic wood with a screwdriver. My intent was to make the box as seamless as possible. I had to go through three applications with sanding after drying.</p>\r\n									<div class=\"centered_image\">\r\n										<a href=\"gallery_images/2/full/full_IMG_5657.JPG\"><img class=\"img-thumbnail\" src=\"article_images/2/alt_IMG_5657.JPG\"/></a>\r\n										<a href=\"gallery_images/2/full/full_IMG_5661.JPG\"><img class=\"img-thumbnail\" src=\"article_images/2/alt_IMG_5661.JPG\"/></a>\r\n									</div>\r\n									<p>Next I stained the wood with one application using a paint brush to a nice dark color. I finished the tray by gluing with carpenter glue some fancy fabric to the top of the base, followed by the tray\'s wooden \"pen\" on top. For final assembly, I attached the power bar to the underside of the tray with screws, slit holes through the fabric to pass wires, and cleaned up the wiring with twist ties.</p>\r\n									<div class=\"centered_image\">\r\n										<a href=\"gallery_images/2/full/full_IMG_5710.JPG\"><img class=\"img-thumbnail\" src=\"article_images/2/alt_IMG_5710.JPG\"/></a>\r\n										<a href=\"gallery_images/2/full/full_IMG_5741.JPG\"><img class=\"img-thumbnail\" src=\"article_images/2/alt_IMG_5741.JPG\"/></a>\r\n									</div>\r\n									<p>As this was my first foray with woodworking, I of course learned a lot which I would consider if I would restart a similar project. After I made all the pieces I was quite intent on sanding away all the sharp corners for safety. But this became a problem during assembly since the pieces no longer lined up in a flush manner. Another problem was that I should have made the pilot holes and counter sinks for the screws much bigger as I ended up cracking the &frac14;\" plywood.</p>\r\n									<div class=\"centered_image\"><a href=\"gallery_images/2/full/full_IMG_5738.JPG\"><img class=\"img-thumbnail\" src=\"gallery_images/2/lrg/lrg_IMG_5738.JPG\"/></a></div>\r\n									<p>I do have to say that I really love what I created in the end. The mess of wires is completely alleviated. I am especially impressed with the magic of plastic wood which covered up all the seams and made the unit look and feel as if it was carved out of one piece of wood.</p>', 'http://www.netopyaplanet.com/gallery_images/2/full/full_IMG_5757.JPG', 'Read my article and join me in my journey as I make my very own charging station from simple materials found around the home.', 2, 'TUT', 'images/features/fea_full_IMG_5757.jpg'),
(3, 'The AEMD Alpha', 1, '2013-08-25 20:11:22', '<div class=\"row\"><div class=\"col-lg-6 col-lg-offset-3 col-sm-8 col-sm-offset-2 col-xs-10 col-xs-offset-1 centered_image\"><div class=\"embed-responsive embed-responsive-4by3\"><iframe class=\"embed-responsive-item\" width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/at5guVKc1LE\" frameborder=\"0\" allowfullscreen></iframe></div></div></div><p>Here\'s my latest school project that I worked on with some friends, the Arduino Entertainment Multimedia Device. It\'s a completely portable Arduino powered LED matrix with a bunch of bells and whistles allowing it to live up to its name. Checkout my video above or continue on for more information and a gallery of shots.</p>', '<p>Here are the AEMD\'s components:\r\n<ul>\r\n<li>Arduino UNO rev. 3</li>\r\n<li>16x24 LED matrix (<a href=\"http://www.adafruit.com/products/555\">Adafruit #555</a>)</li>\r\n<li>2-axis analog joystick with select button (<a href=\"http://www.adafruit.com/products/512\">Adafruit #512</a>)</li>\r\n<li>DS1307 Real Time Clock breakout (<a href=\"http://www.adafruit.com/products/264\">Adafruit #264</a>)</li>\r\n<li>MAN6710 Red 2 Digit 7-Segment Display</li>\r\n<li>Two 74HC595 Shift Registers</li>\r\n<li>Project Box Enclosure</li>\r\n<li>Panel Mounted Button</li>\r\n<li>Panel Mounted Switch</li>\r\n<li>Piezo Element</li>\r\n<li>Photoresistor</li>\r\n<li>Temperature Sensor</li>\r\n<li>9V Battery</li>\r\n</ul></p>\r\n<p>The AEMD Alpha was in fact our submission for the final project of a Digital Electronics class where the criteria was to make \"something useful\" with an Arduino. For all of the members in our group, this was the first time we ever used the Arduino or even handled a soldering iron to make something this complex. We can all attest to the fact that we learnt a lot and that this was a great beginner project. While the Adafruit LED matrix comes nicely preassembled, we still had chance to practice our soldering skills with the assembly of the simpler RTC. On the programming side, Adafruit provides great libraries for its products, but we still learnt a lot about memory management on the Arduino and even using binary operation to simplify coding among other things.</p> \r\n	<p>For the conceptualization of our project, we were greatly inspired by the <a href=\"https://code.google.com/p/chlonos/\">Chlonos Talking Clock</a>. We brainstormed many ideas and our own iterations, and limited ourselves to the functionalities that are shown in the video. In the end we have a fun, portable, entertainment device that plays our favorites games and also has some useful utilities. We would definitely recommend this project to any beginners due to its simple to use components while still requiring you to get your hands dirty.</p>\r\n<p>Lastly here is the code for our project. I\'ve hidden it at the end as I find that it\'s a bit of a mess and deserves a proper explanation, which I might get to if there\'s a demand. Anyway enjoy: </br><a href=\"http://www.netopyaplanet.com/article_code/sketch_apr25a.ino\">sketch_apr25a.ino</a></p>', 'http://www.netopyaplanet.com/gallery_images/3/full/full_IMG_5781.JPG', 'Here\'s my latest school project that I worked on with some friends, the Arduino Entertainment Multimedia Device. It\'s a completely portable Arduino powered LED matrix with a bunch of bells and whistles allowing it to live up to its name. Checkout my video above or continue on for more information and a gallery of shots.', 3, 'PROJ', 'images/features/fea_full_IMG_5781.jpg'),
(4, 'Introducing Bytety', 1, '2013-12-16 18:01:01', '<div class=\"centered_image\"><a href=\"bytety.html\"><img src=\"article_images/bytety_intro_img.jpg\" class=\"img-thumbnail\"/></a></div>\r\n<p>After creating byte arrays by hand a couple of times for my previous project, the AEMD Alpha, I decided to create <a href=\"bytety.html\">Bytety</a>! <a href=\"bytety.html\">Bytety</a> is a simple app that allows you to draw graphics onto an array and produce the coded array for you! This is great for creating graphics for single colored LED Matrices powered by controllers like the Arduino, and probably many other things. First enter in the dimensions of your LED matrix, and then click on the boxes to toggle the state of the LED they represent. You can also hold down any key to then hover over the boxes to change multiple LEDs at once. If things get too big, you can also change the zoom. The code is generated in real time in the box below. You can have an infinite amount of rows (y) but you are probably limited to 63 columns (things might get funny after that). If you need more, or you encounter any bugs, let me know. Enjoy!</p>', '', 'http://www.netopyaplanet.com/article_images/bytety_intro_img.jpg', 'After creating byte arrays by hand a couple of times for my previous project, the AEMD Alpha, I decided to create Bytety! Bytety is a simple app that allows you to draw graphics onto an array and produce the coded array for you! This is great for creating graphics for single colored LED Matrices powered by controllers like the Arduino, and probably many other things. First enter in the dimensions of your LED matrix, and then click on the boxes to toggle the state of the LED they represent. You can also hold down any key to then hover over the boxes to change multiple LEDs at once. If things get too big, you can also change the zoom. The code is generated in real time in the box below. You can have an infinite amount of rows (y) but you are probably limited to 63 columns (things might get funny after that). If you need more, or you encounter any bugs, let me know. Enjoy!', 0, 'TOOL', 'images/features/fea_bytety_intro_img.jpg'),
(5, 'LED Matrices with Arduino, Netopya\'s Way', 1, '2014-01-17 22:57:38', '<div class=\"centered_image\"><img src=\"article_images/5/bytettut.jpg\" class=\"img-thumbnail\"/></div>\r\n<p>One of the great things I learned working on my previous project, the AEMD Alpha, was using the Arduino to control an LED matrix. The Adafruit libraries for the device took care of the multiplexing and other complexities and all that was left was controlling the individual LEDs from their x and y coordinates. But this led to the next challenge of how exactly to get images and graphics on the Arduino. First I&#8217;ll describe a logic solution, but I&#8217;ll show how this method falls apart. The alternative solution requires arrays of bytes (or integers) which is where my previous post introducing <a href=\"bytety.html\">Bytety</a> comes in. This little web app that I created presents a mock matrix that you can play around with to create your own graphics, and the program generates the necessary array for your Arduino code.  Continue reading on to learn my easy solution to display images on a LED matrix with an Arduino all while improving the memory footprint of your program.</p>', '	<p>Notes: A lot of what I will be discussing is addressed on this site <a href=\"http://playground.arduino.cc/Code/BitMath\">here</a>, which is one of the places where I learnt how to do this. In my post, I will be using as an example the LED matrix that I used in the AEMD project, the <a href=\"http://www.adafruit.com/products/555\">Adafruit 16x24 matrix (#555)</a>.</p>\r\n	<p>The way that I originally thought of addressing this challenge was to make a 2-dimensional arrays of Booleans with one variable for each pixel, as illustrated in this table to show the word TETRIS:</p>\r\n	<figure>\r\n		<img class=\"img-thumbnail\" src=\"article_images/5/g12.jpg\" width=\"690\" height=\"181\"/>\r\n		<figcaption>Fig. 1 - Table representing the pattern of pixels required to display the word tetris</figcation>\r\n	</figure>\r\n	<p>And here is how I would code this word on 6 rows of a matrix with the supporting code to display it on the LEDs. Note how the array tetris[5][64] corresponds to the rows and columns of the table above.</p>\r\n	<figure><code><pre>\r\n#include \"HT1632.h\"\r\n\r\n#define DATA 2\r\n#define WR   3\r\n#define CS   4\r\n\r\nHT1632LEDMatrix matrix = HT1632LEDMatrix(DATA, WR, CS); //Define the LED matrix\r\n\r\n//Define all the state of all the pixels to show the word \"TETRIS\"\r\nboolean tetris[6][16] = {\r\n	{1,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0},\r\n	{0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1},\r\n	{0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0},\r\n	{0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1},\r\n	{0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1},\r\n	{0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1}\r\n};\r\n\r\nvoid setup() {\r\n	matrix.begin(HT1632_COMMON_16NMOS); //setup matrix\r\n}\r\n\r\nvoid loop() {\r\n	//Run through all the pixels and write their state to the display\r\n	for(int y=0; y<6; y++)\r\n	{\r\n		for(int x=0; x<16; x++)\r\n		{\r\n    		matrix.drawPixel(y,x,tetris[y][x]);\r\n  		}\r\n		}\r\n	matrix.writeScreen();\r\n	delay(1000);\r\n}</pre></code>\r\n		<figcaption>Fig 2. - Typical code to set the values of pixels on an LED matrix</figcation>\r\n	</figure>\r\n	<p>The problem with this method is that it isn&#8217;t exactly elegant, and it&#8217;s huge code wise and more importantly memory wise. Each Boolean takes one byte of memory which makes the example use 96 bytes. This may not sound like much and isn&#8217;t too bad if this is your only graphic in the program, but if you need more images and text, this method adds up really fast making it really easy to run out of memory on small platforms like the Arduino. We can do better! The alternative is to store each row in as a binary number, combining each piece of data into one integer. In the table below, each row is packed into a binary value as shown in the last column. A binary number can be written using the 0b prefix in Arduino code, or you can calculate the 10 based decimal representation by, using the example below, summing up all the products of the columns with the value in the top row, for the respective row.</p>	\r\n	<figure>\r\n		<img class=\"img-thumbnail\" src=\"article_images/5/g13.jpg\" height=\"176\" width=\"690\"/>\r\n		<figcaption>Fig. 3 - Representing rows of pixels with as a decimal nummber</figcaption>\r\n	</figure>\r\n	<p>Here are the two possible alternatives to the tetris array, the first one in binary and the second one in decimal, both of which are now 1-dimensional arrays. I like using the decimal representation since it visually takes up less space. Therefore, note that I must use unsigned integers. In the Arduino&#8217;s language, integers are 16-bits which is convenient since this is the number of columns on the LED matrix. But by default the last bit on integers determine the signing of the number and not the actual absolute value of the number, so I must specify the unsigned nature of the variables to allow the use of all 16-bits. Below I show the changed <code>tetris[]</code> array using the decimal representation of the rows.</p>\r\n	<figure><code><pre>\r\nunsigned int tetris[6] = {59152,23255,21172,23255,21169,6311};\r\n		</pre></code>\r\n		<figcaption>Fig. 4 - Packed row data as integers in an array</figcation>\r\n	</figure>\r\n	<p>As you can tell by my explanation so far, this process to create your array is somewhat complicated, which is why I created the <a href=\"bytety.html\">Bytety</a> app to simplify to process. First enter in the dimensions of your LED matrix, and then click on the boxes to toggle the state of the LED they represent. You can also hold down any key to then hover over the boxes to change multiple LEDs at once. The array of integers as decimal representations of the binary values of the rows is generated for you!</p>\r\n	<p>Now I will explain how to display this on an LED Matrix, as I did for the AEMD project. Below I give below an example of how to implement this in your code to show the word TETRIS.</p>\r\n<figure><code><pre>\r\n#include \"HT1632.h\"\r\n\r\n#define DATA 2\r\n#define WR   3\r\n#define CS   4\r\n\r\nHT1632LEDMatrix matrix = HT1632LEDMatrix(DATA, WR, CS); //Define the LED matrix\r\n\r\n//Define all the state of all the pixels to show the word \"TETRIS\"\r\nPROGMEM prog_uint16_t tetris[6] = {59152,23255,21172,23255,21169,6311};\r\n\r\nvoid setup() {\r\n	matrix.begin(HT1632_COMMON_16NMOS); //setup matrix\r\n}\r\n\r\nvoid loop() {\r\n	//Run through all the pixels and write their state to the display\r\n	for(int y=0; y<6; y++)\r\n	{\r\n		for(int x=0; x<16; x++)\r\n		{\r\n			matrix.drawPixel(y,x,toeightbit(pgm_read_word(&(tetris[y])) & (1u << x)));\r\n		}\r\n	}\r\n	matrix.writeScreen();\r\n	delay(1000);\r\n}\r\n\r\nboolean toeightbit(unsigned int x)\r\n{\r\n	//my way of turning a uint16_t into 8-bit\r\n	if(x)return 1; else return 0;\r\n}\r\n</pre></code>\r\n	<figcaption>Fig. 5 - Final code to represent graphics stored as integer arrays on a LED matrix</figcaption>\r\n</figure>\r\n	<p>As you can see, I&#8217;ve changed the code a lot. First of all, I use the Arduino&#8217;s PROGMEM features to store and retrieve the variable in the Arduino&#8217;s flash memory to further improve the memory efficiency of the program (<a href=\"http://arduino.cc/en/Reference/PROGMEM\">See the Arduino Reference</a>). I write <code>PROGMEM prog_uint16_t</code> in front of the variable to declare it and then use <code>pgm_read_word(&(VARIABLE_NAME)) </code> to read the variable. If your graphic uses less than 9 columns, then you should probably use bytes in the place of integers (and change the PROGMEM  codes accordingly) so save on memory. Now if we look at the value of tetris[6]; this is where I store the byte array (as I explained I used integers instead) that contains all the information for the LED states with each item in the array corresponding to a row of LEDs.</p> \r\n	<p>To decode this information and display it on the matrix, I use the code in the <code>loop()</code>. Let&#8217;s break it down step by step. First is the two nested for loops to run through the x and y coordinates of all the LEDs we will be displaying. Secondly is the matrix.drawPixel(y,x,value) function which comes from the Adafruit library for the display and allows us to set the state of individual pixels. Note how I inverted the x and y values since the display is meant to be used in landscape while I&#8217;m using it in portrait. Next is a function I created called toeightbit(). The Adafruit library expects and 8-bit variable for the state of the LED like a Boolean. But I&#8217;m using 16-bit integers and the output of the code to determine the state of the individual pixels is also an integer, so I must use this function to convert it to a Boolean. Next I use the <code>pgm_read_word(&(VARIABLE_NAME)) </code> function to read the variable the tetris variable where I stored all the information, but I use y as the index to extract the row of pixels for the graphic. </p>\r\n	<p>Now that we have the row, we must check each column and see whether we want that pixel to be on or off. <code> 1u &lt;&lt; x</code> is a bit shift operation that produces a binary number with a one in the column that we wish to check. Comparing this number using a bitwise And (<code>&</code>) to the value of the row from <code> tetris[y]</code> results in 0 if there is not a 1 value in the position that we are checking in <code> tetris[y]</code>, or the result of the bitwise operation if there is a 1 value in that position (which is some number that is not zero, infact it&#8217;s <code> 1u &lt;&lt; x</code>). So moving back through my explanation, this value gets set to the toeightbit() function which converts it to a Boolean which then sets the value of matrix.drawPixel(y,x,value), either setting the pixel on or off.></p>\r\n	<p>Having a general understanding of the concepts in this tutorial such as bitwise operations can be very useful and I would recommend it for your own implementations of these ideas. Understanding the logic behind byte arrays and their use is very important, even though the <a href=\"bytety.html\">Bytety</a> app I created can make these byte arrays for you; it should serve as a complement tool. I hope you&#8217;ve learnt a lot about making more efficient and smaller programs and make much use of <a href=\"bytety.html\">Bytety</a>!</p>\r\n', 'http://www.netopyaplanet.com/article_images/5/bytettut.jpg', 'One of the great things I learned working on my previous project, the AEMD Alpha, was using the Arduino to control an LED matrix. The Adafruit libraries for the device took care of the multiplexing and other complexities and all that was left was controlling the individual LEDs from their x and y coordinates. But this led to the next challenge of how exactly to get images and graphics on the Arduino. First I\'ll describe a logic solution, but I\'ll show how this method falls apart. The alternative solution requires arrays of bytes (or integers) which is where my previous post introducing Bytety comes in. This little web app that I created presents a mock matrix that you can play around with to create your own graphics, and the program generates the necessary array for your Arduino code.  Continue reading on to learn my easy solution to display images on a LED matrix with an Arduino all while improving the memory footprint of your program.', 0, 'TUT', 'images/features/fea_bytettut.jpg'),
(6, 'Controlling Multiple I2C Devices with Arduino', 1, '2014-06-23 00:15:55', '<div class=\"centered_image\"><img src=\"gallery_images/4/lrg/lrg_IMG_5841-Copy.jpg\" class=\"img-thumbnail\"/></div>\r\n<p>A project I was working on a while ago encountered a problem when we decided to use multiple I2C color sensors. The I2C protocol relies on the fact that each device you connect as a unique address. But in the case of the sensors we were using, the address is hard wired into the device, so connecting multiple identical sensors with the same permanent address would creating a conflict. This problem was easily solved with the use of an I2C multiplexer. Not much information was available on the web regarding this solution, but after doing some research we learned that the implementation is very easy. Read on pass the break to see what we learned and how you can use multiple identical I2C devices in your Arduino projects.</p>', '<h3>Introduction</h3>\r\n<p>In our project, we used six Adafruit I2C color sensors to sort up to six ping pong balls simultaneously. As we already discussed, this is problematic since each sensor is identical with the same address. An I2C multiplexer can be used to solve this issue but only allowing one color sensor to be accessed at a time. The multiplexer we chose was the Texas Intruments TCA9548A, which can switch up to 8 I2C lines. The two I2C lines of each color sensor (SDA and SCL) were connected to unique outputs on the I2C multiplexer. The multiplexer has its own address that could be written to by the Arduino with the Wire library to connect (and disconnect) the individual I2C lines of each sensor. The rest of this tutorial will explain the proof of concept that we realized to test this setup.</p>\r\n<h2>Components and Wiring</h2>\r\n<ul>\r\n	<li>6x Adafruit Color Sensor (<a href=\"http://www.adafruit.com/products/1334\">#1334</a>)</li>\r\n	<li>I2C multiplexer TCA9548A</li>\r\n	<li>Adafruit SOIC breakout (<a href=\"http://www.adafruit.com/products/1208\">#1208</a>)</li>\r\n	<li>Breadboard/Breadboard wires</li>\r\n	<li>Arduino</li>\r\n</ul>\r\n<h3>Wiring</h3>\r\n<p>The only complication with the wiring of this project is the TCA9548A chip itself, which commonly comes in a SOIC (surface mount) package, which is difficult to solder by hand and cannot be placed on a breadboard. In our case we used the Adafruit PCB SOIC-28 breakout board so that we could place the chip on and breadboard, and later insert into female headers on a custom PCB. Note that the breakout has 28 pins while the chip only has 24 pins; the extra 4 pins just remained unused (Consider that this messes up the numbering scheme printed on the breakout). On the wiring diagram above, I used a proper SOIC-24 breakout so that there is no funny numbering scheme (These are just harder to find). Soldering the surface mount chip was quite painstaking but we patiently succeed on our first try.</p>\r\n<figure>\r\n	<a href=\"gallery_images/4/full/full_colorsensordia1_bb.png\"><img class=\"img-thumbnail\" src=\"gallery_images/4/lrg/lrg_colorsensordia1_bb.jpg\"/></a>\r\n	<figcaption>Fig. 1 - Writing diagram of this project (Click for larger image)</figcaption>\r\n</figure>\r\n<p>The rest of the wiring of this project is quite straight forward.  The SCL and SDA inputs of the TCA9548A (pins 22 &amp; 23) should be connected to the I2C pins of the Arduino (analog pins A5 and A4) with some pull-up resistors.  Each of the SCL and SDA lines of the color sensors should be connected to their own SCL, SDA output on the TCA9548A.</p>\r\n<h3>Programming</h3>\r\n<p>To program the test bench, I based my code on the <a href=\"https://learn.adafruit.com/adafruit-color-sensors/overview\">Adafruit example project</a> for the sensors, but made modifications for our setup. The two fundamental differences were that I changed the color sensor object into an array of color sensor objects (six of them) and I inserted the following code to switch the I2C multiplexer to the sensor I wished to communicate with before any code that communicated with the sensors.</p>\r\n<figure>\r\n	<code>\r\n	Wire.beginTransmission(0x70);</br>\r\n    Wire.write(1 &lt;&lt; i);</br>\r\n    Wire.endTransmission();\r\n	</code>\r\n    <figcaption>Fig. 2 - Example code to switch the i2c multiplexer</figcaption>\r\n</figure>\r\n<p>This code simply begins the communication using the Wire library to the address of the I2C multiplexer (0x70) as stated in the documentation. Then it writes a number representing the number of the color sensor we wish to access. For example if we wanted to access the third sensor (the sensor connected to SDA2 and SCL2), we would assign a value of 2 to the <code>i</code> variable. Finally the Wire library function that completes the transmission is called. To further understand necessity the bit shift operator, the data sheet tells us that it reads the values of each bit in a 8-bit word to determine the state of each output. This is quite powerful and would allow various sensors to be selected and connected simultaneously, but in our case we only want one line to be activated at a time.</p>\r\n<p>To retrieve the data from the sensors basing of the Adafruit example, I put all of the sensing code into a for loop iterating over the six sensors, making sure to use the Wire functions to switch the I2C multiplexer to the appropriate line. I modified the serial communication code by using \":\" delimiters for each RGB and clear values, and \";\" delimiters to separate color sensors. I removed the gamma table code because we were not concerned about the color accuracy of the sensor, just if it would be able to distinguish between white and orange. Another final change is that the Adafruit library for the color sensor announces over serial that it is connected when you initialize the sensor, which interferes with our serial communication. So solve this, simply comment out the line in the library with the problematic code. In the <code>Adafruit_TCS34725.cpp</code> file, just note line 167.</p>\r\n<figure>\r\n	<a href=\"gallery_images/4/full/full_notethis.PNG\"><img class=\"img-thumbnail\" src=\"gallery_images/4/lrg/lrg_notethis.jpg\"/></a>\r\n	<figcaption>Fig. 3 - Comment out this line from Adafruit_TCS34725.cpp!</figcaption>\r\n</figure>\r\n<p>To display this information on your computer I use a Processing app that reads the serial information and displays on the screen. There are six boxes showing the color from the sensor along with a vertical bar which indicates the clear value.</p>\r\n<figure>\r\n	<a href=\"gallery_images/4/full/full_screenshot2.JPG\"><img class=\"img-thumbnail\" src=\"gallery_images/4/lrg/lrg_screenshot2.jpg\"/></a>\r\n	<figcaption>Fig. 4 - Screenshot of the processing app with an orange ball on top of the 4<sup>th</sup> color sensor</figcaption>\r\n</figure>\r\n<h3>Conclusion</h3>\r\n<p>This project was one component that was used on robot for a competition I participated in called the Engineering Games. This part of the robot was used to quickly sort the ping pong balls required for the challenge. A video showcasing our team and our robot for the competition can be see below. Note at timestamp <a href=\"https://www.youtube.com/watch?v=_erLsbOwTc4&list=UUK0Z87bs6PvbSnr4TRXAHFw#t=83\">1:23</a> where the sorting mechanism is shown in action.</p>\r\n<div class=\"row\"><div class=\"col-lg-8 col-lg-offset-2 col-sm-10 col-sm-offset-1 centered_image\"><div class=\"embed-responsive embed-responsive-16by9\">\r\n<iframe class=\"embed-responsive-item\" width=\"533\" height=\"400\" src=\"//www.youtube.com/embed/_erLsbOwTc4\" frameborder=\"0\" allowfullscreen></iframe>\r\n</div></div></div>\r\n<p>In conclusion, I hope that sharing this project with you helped you to learn how to use multiple color sensors with an Arduino. Even if multiple I2C sensors have the address, it is very simple to wire them together though an I2C multiplexer and communicate to the multiplexer with 3 lines of code. If you have any questions, feel free to email me. As always, code is below. Enjoy!</p>\r\n<p><br/><a href=\"https://github.com/Netopya/Arduino-I2C-Multi-Color-Sensors\">Github repo</a><br/>\r\n<a href=\"article_code/6/colorviewgood1.zip\">Arduino code</a><br/>\r\n<a href=\"article_code/6/sketch_131121b_good1.zip\">Processing code</a><br/>\r\n<a href=\"https://github.com/adafruit/Adafruit_TCS34725\">Color Sensor code library (Adafruit)</a></p>', 'http://www.netopyaplanet.com/gallery_images/4/full/full_IMG_5841-Copy.JPG', 'A project I was working on a while ago encountered a problem when we decided to use multiple I2C color sensors. The I2C protocol relies on the fact that each device you connect as a unique address. But in the case of the sensors we were using, the address is hard wired into the device, so connecting multiple identical sensors with the same permanent address would creating a conflict. This problem was easily solved with the use of an I2C multiplexer. Not much information was available on the web regarding this solution, but after doing some research we learned that the implementation is very easy. Read on pass the break to see what we learned and how you can use multiple identical I2C devices in your Arduino projects.', 4, 'TUT', 'images/features/fea_full_IMG_5841-Copy.jpg'),
(7, 'Introducing IP Planner!', 1, '2014-08-03 21:21:45', '<div class=\"row\"><div class=\"col-lg-8 col-lg-offset-2 col-sm-10 col-sm-offset-1 centered_image\"><div class=\"embed-responsive embed-responsive-16by9\"><iframe class=\"embed-responsive-item\" width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/xvtlYOm-Dac\" frameborder=\"0\" allowfullscreen></iframe></div></div></div><p>I created my latest project after playing League of Legends and asking the question how long will it take my to unlock Champions? Champions can be unlocked using the the in game currency, Influence Points, which are earned by playing matches. I found online other people who were wondering the same thing as I, but many people chose to estimate the answer based on the playing statistics of popular players. I wanted a solution that could calculate an answer based on my own play history, and that\'s where IP Planner was born! It uses the publicly available Riot API to load a summoner\'s history and calculate the rate at which they earn Influence Points. Check it out <a href=\"/ipplanner\">here</a>!</p>', '', 'http://www.netopyaplanet.com/ipplanner/img/banner1.jpg', 'I created my latest project after playing League of Legends and asking the question how long will it take my to unlock Champions? Champions can be unlocked using the the in game currency, Influence Points, which are earned by playing matches. I found online other people who were wondering the same thing as I, but many people chose to estimate the answer based on the playing statistics of popular players. I wanted a solution that could calculate an answer based on my own play history, and that\'s where IP Planner was born! It uses the publicly available Riot API to load a summoner\'s history and calculate the rate at which they earn Influence Points. Check it out here!', 0, 'TOOL', 'images/features/fea_banner1.jpg'),
(8, 'Audio Virtual Reality', 1, '2014-09-01 18:51:21', '<div class=\"row\"><div class=\"col-lg-8 col-lg-offset-2 col-sm-10 col-sm-offset-1 centered_image\"><div class=\"embed-responsive embed-responsive-16by9\"><iframe class=\"embed-responsive-item\" width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/ZT7ZVP67Y0Y\" frameborder=\"0\" allowfullscreen></iframe></div></div></div>\r\n<p>Here is a video demoing my latest project called Audio VR. Virtual Reality is quite a hot topic nowadays and many devices aim to augment the experience of content on your computer. My idea was to augment the experience of the computer itself by moving the computer into your actual reality. Audio VR works by measuring the head\'s position and adjusting the audio output channels of the computer accordingly to simulate the location of the computer with respect to the head. By modifying the channels in the left and right ears of your headphones, you get a similar experience to using speakers. Read on to learn more about this project.</p>', '<h3>Planning and programming</h3>\r\n<p>When planning out this project, I was initially looking into IMUs (Inertial Measurement Units) that I could connect to an Arduino to record the head\'s motion. But then I asked myself if there were any devices I had lying around that had similar motion sensing capabilities and realized that I could use any modern mobile device for testing instead of investing in new hardware. I decided to use my 4th generation iPod Touch which has the requisite motion sensor and wireless connectivity already. To program the sensing side, I chose to create a web application since I am most comfortable with this type of programming. Furthermore, the code can be used on any device by just navigating to the URL. The DeviceOrientation Event Specification allows JavaScript to retrieve the motion information from the device to be used by the web application. AJAX requests transmit the orientation of the device to a server where a PHP file writes the data to a text file. On the client side, a C# program reads the orientation information from the text file and can calculates the appropriate volumes for the right and left ears. The Windows Core Audio API (with Vannatech wrappers) is used to have access to the Windows audio mixer and modify the left and right channels.</p>\r\n<h3>Closing Thoughts</h3>\r\n<p>In the end, I found the effect achieved a bit disappointing. The system doesn\'t really augment the experience of using a computer as much as I hoped, besides the realization that I don\'t frequently look side to side when using my computer. For these reasons I do not believe it will be worthwhile to go on and get better hardware to improve the project. One application I thought that this application may be useful would be in a multi-monitor setup where applications running on different monitors would have their individual left and right audio channels modified to match their position with respect to the user. For example looking at the left monitor would decrease the left track volume in applications on the rightmost monitor. But such an implementation would be difficult in Windows since security reasons prevent external modifications of a program\'s private audio mixer.</p>\r\n<p>In the end I really enjoyed working on this project and impressed myself with what could be accomplished by throwing together every day electronic devices and making them work in unison for something that none of them were really designed for.</p>\r\n<p><a href=\"http://github.com/Netopya/Audio-Virtual-Reality\">Code on GitHub</a></p>', 'http://www.netopyaplanet.com/article_images/8/Audio%20Virtual%20Reality%20(HQ).jpg', 'Here is a video demoing my latest project called Audio VR. Virtual Reality is quite a hot topic nowadays and many devices aim to augment the experience of content on your computer. My idea was to augment the experience of the computer itself by moving the computer into your actual reality. Audio VR works by measuring the head\'s position and adjusting the audio output channels of the computer accordingly to simulate the location of the computer with respect to the head. By modifying the channels in the left and right ears of your headphones, you get a similar experience to using speakers. Read on to learn more about this project.', 0, 'PROJ', 'images/features/fea_AudioVirtual Reality(HQ).jpg'),
(9, 'Recycling a Laptop LCD Screen into a Raspberry Pi Test Bench', 1, '2014-12-15 20:38:19', '<div class=\"centered_image\"><img src=\"gallery_images/5/lrg/lrg_IMG_6591.JPG\" class=\"img-thumbnail\"/></div><p>This project started off when trying to find a use for a broken laptop. The screen was perfectly fine so I decided to integrate it with a Raspberry Pi. The Raspberry Pi is a fascinating computer great for small multimedia projects. I had such a project in mind, but first I wanted to test out the Pi to see what it was capable of so I create a test bench. The arrangement was fairly simple with the Raspberry Pi, a laptop LCD display, and a LCD controller to connect the two together. This setup was a great way to tryout the Pi and to recycle an old computer into a new one.</p>', '<h3>List of Parts</h3>\r\n<ul>\r\n<li>Raspberry Pi B+ (<a href=\"http://www.robotshop.com/ca/en/raspberry-pi-model-b-plus-computer-board.html\">RobotShop</a>)</li>\r\n<li>1.5A USB power supply (<a href=\"http://www.robotshop.com/ca/en/raspberry-pi-power-supply.html\">RobotShop</a>)</li>\r\n<li>LCD Controller with 4A power supply (<a href=\"http://www.ebay.com/itm/M-NT68676-2A-HDMI-DVI-VGA-Audio-LCD-Controller-Board-DIY-Kit-Power-Adapter-/121059321784\">e-qstore</a>)</li>\r\n<li>Laptop LCD screen (Recycled)</li>\r\n<li>HDMI cable (<a href=\"http://www.dx.com/p/jjb-v1-4-hdmi-male-to-hdmi-male-connection-cable-black-1m-188441#.VI82_yvF-ao\">Deal Extreme</a>)</li>\r\n<li>Keyboard and mouse</li>\r\n</ul>\r\n<h3>Getting the Components</h3>\r\n<p>I started off by following the disassembly instructions for the broken HP Pavilion dv6000 laptop I was taking the LCD panel from. I kept the screen&#39;s frame but did remove components such as Wi-Fi antennas and the webcam from the back. The frame was very useful for holding up the display while keeping it adjustable for this quick test. To make use of this display I needed an LCD controller to interface the display with common connectors such as VGA and HDMI. These devices are not the easiest to come by, but there are a few sellers on eBay which is where I got mine. The seller I contacted had great customer service and was able to point be to the appropriate controller for my LCD display.</p>\r\n<h3>Assembly</h3>\r\n<p>Once I got all the parts, hooking it all up was really easy. All the components of the LCD controller came pre-connected, so all I had to connect was the LVDS and power connections to the LCD panel and the HDMI cable to the Raspberry Pi. For final assembly I fastened all the parts to a piece of plywood with plastic spacers.</p>\r\n<figure>\r\n	<a href=\"gallery_images/5/full/full_IMG_6599_anot.JPG\">\r\n		<img class=\"img-thumbnail\" src=\"gallery_images/5/lrg/lrg_IMG_6599_anot.JPG\"/>\r\n	</a>\r\n	<figcaption>Assembled Parts</figcaption>\r\n</figure>\r\n<h3>Final Thoughts</h3>\r\n<p>I have to say that I am really satisfied with the Raspberry Pi. It&#39;s amazing the form factors you can get computers in nowadays. Thinking back, one change I would have made to would be to turn the LCD panel so that it would be facing the other way and all the components would be hidden behind the display frame. Never the less I do enjoy having all the components in view. So far the test bench is working great and I&#39;m looking forward to getting some projects up and running on the device.</p>', 'http://www.netopyaplanet.com/gallery_images/5/full/full_IMG_6591.JPG', 'A quick and easy guide to use a Raspberry Pi to bring a broken laptop LCD back to life!', 5, 'TUT', 'images/features/fea_full_IMG_6591.jpg'),
(10, 'OPUS en ligne Review', 1, '2015-08-17 19:26:40', '<div class=\"centered_image\"><img src=\"gallery_images/6/lrg/lrg_IMG_6684.jpg\" class=\"img-thumbnail\"/></div><p>The various transport agencies in Quebec have been using the OPUS card for contactless fare verification. Seven years after it was released, OPUS en ligne has now been introduced and allows the purchasing of fares online through a card reader connected to your computer. I decided to get one of these required &#36;14.49 readers and give it a spin. Does it work? Is it a trip into the technological Stone Age or will it revolutionize the way we purchase bus passes? Join me on this journey to find out!</p>', '<h3>Hardware</h3>\r\n<p>The reader arrived within one business day in packaging small enough to fit through my mail box. Included was the reader itself, a meter long USB Mini-B cable, and an instruction card. The reader is made of a cheap blue plastic with a small black accent along the sides revealing a slit to insert the OPUS card. A white plastic strip hides a red power LED and a blue activity LED. Setting up the reader was surprisingly straight forward; after plugging it into my computer it was recognized immediately without any hassle.</p>\r\n<h3>Buying Experience</h3>\r\n<p>My first experience with the reader was buying my August monthly bus pass. Having Java (a required software dependency) already installed and updated to the latest version, I thought I was good to go. However after plugging in the reader and navigating to the site (<a href=\"https://stm.opusenligne.ca/\">stm.opusenligne.ca</a>), I was immediately hit with an obstacle since my browser of choice, Google Chrome, no longer supports Java which renders their website useless. This goes against the STM\'s user information which claims that Chrome is supported. Unfazed, I fired up and updated my second browser of choice, Mozilla Firefox. This time around Java was supported, and I had to go through three steps of authorization to allow the Java applet to run.</p>\r\n<p>Once the Java hurdles were out of the way, the process became much smoother. There was no need to register or create an account. My card was immediately read and I was shown its current status with a monthly pass for the previous month and some AMT train tickets. I proceeded to recharge the card and was given the option of a 4 month, 1 month, or 1 week pass. Reduced fare was automatically applied due to my student status. After selecting a monthly pass for August, I was brought to the payment screen where all I had to fill in was my name, email, and credit card information (only Visa and MasterCard are currently accepted). Then lo and behold, the payment was processed, the card was recharged, and I was given a receipt of the successful transaction. A copy of the receipt was also sent to my email which is quite useful for the income tax credit. I was brought back to the landing page with my updated card and the new transit fare on it. And that\'s it!</p>\r\n<h3>Thoughts</h3>\r\n<p>I\'ll start off by commenting on the user experience side. Java griefs aside, OPUS en ligne scores full points for an all-round pleasant online shopping experience. On the hardware side: the reader is satisfactory and has no connectivity issues, something that cannot be said for half of the USB devices I use. On the software side: the GUI was nice, there were no technical hiccups during the purchase, and the entire process was short and down to business. It was much appreciated that creating some sort of account was not required.  However, having to enter in my contact and payment information was a tad on the annoying side. Although this added 15 seconds of taking out and copying my credit card may seem like a first world problem, we should understand that this reader is competing with the STM\'s own recharge machines that can use chip and pin payment. I would have been more pleased with a faster option such as PayPal\'s one click checkout.</p>\r\n<p>Although it works, the OPUS ecosystem is really outdated. This online recharge system has been in development for a couple of years and it has ironically been released just as its supporting technology is on its deathbed. When the OPUS was first introduced in 2008, it was an acceptable decision to store fares on a physical card. At the time, smartphones were still taking baby steps and who would want to gamble on the innovations they promised to introduce to the tech world. However come the early 2010\'s, everyone has a smartphone and everything is connect to the internet, to the \"cloud.\" Any reasoning for ignoring this incredible advancement in technology is beyond me. OPUS should have evolved accordingly and moved the fares from the card to the cloud, with the card now only acting as a link to your online account. You would even be able to substitute the card for a smartphone since all that is now required is your OPUS number.  Furthermore, there would be no need to interface your computer or smartphone with any special hardware since they are already connected to the internet.</p>\r\n<p>To put the final nail in the coffin, browser plugin technologies such as Java are currently being shunned by the tech industry. As mentioned before, even though the OPUS reader was designed to work with Google Chrome, Google has decided to no longer support Java. With Microsoft strongly encouraging adoption of Windows 10 with a free upgrade, OPUS loses another browser as Microsoft Edge (which replaced Internet Explorer) has decided not to support archaic Java. This leaves the only working option to be Mozilla Firefox. However, with Firefox recently disabling a version of Adobe\'s plugin Flash, it\'s not inconceivable to see the axe fall on Java as well. I would normally now suggests how to circumvent this demise, but I don\'t want to give Quebec transport agencies any ideas. The real solution is to tear system down, a decision that should have been made years ago.</p>\r\n<h3>Conclusion</h3>\r\n<p>The OPUS card reader is simple and it works. If I miss buying fares along the route of my daily commute, I\'ll probably use this at home in place of walking down the street to the d&eacute;panneur. However I don\'t think it\'s worth &#36;14.49. Between the hardware setup, Java woes, and the convenience of other options (like going to the Metro), the OPUS en ligne is not the solution that transit users need. Furthermore the future of this site is even more dubious.  With Firefox being the last supporting browser, OPUS en ligne is going to have to reinvent itself mere weeks after being released.</p>', 'http://netopyaplanet.com/gallery_images/6/full/full_IMG_6684.jpg', 'My review of OPUS en ligne and the OPUS card reader', 6, 'TUT', 'http://netopyaplanet.com/gallery_images/6/full/full_IMG_6684.jpg');
INSERT INTO `articles` (`id`, `title`, `user_id`, `timestamp`, `overfold_content`, `content`, `ogimage_url`, `ogdescription`, `gallery_id`, `tag`, `feature_clip`) VALUES
(11, '&#36;4 Computer Backlighting System', 1, '2015-10-08 21:18:21', '<div class=\"centered_image\"><a href=\"article_images/11/full_IMG_6612.JPG\"><img src=\"article_images/11/prev_IMG_6612.JPG\" class=\"img-thumbnail\"/></a></div>\r\n<p>Computer monitor backlights are cool. Solutions such as Philips Ambilight are available, but many people opt to design their own system. I wanted to see just how much you can save and what you can get by making the cheapest backlighting system possible. By salvaging parts from previous projects and getting free samples, all I need to buy where some RGB LEDs for only &#36;4.00. Join me as I experiment and create the most basic computer ambient light solution.</p>', '<h2>Parts</h2>\r\n<ul>\r\n<li>Arduino Uno (or equivalent)</li>\r\n<li>Wires and breadboard</li>\r\n<li>10x RGB LEDs (<a href=\"http://www.ebay.com/itm/Diffused-10mm-RGB-Common-Anode-4Pins-LED-10pcs-FreeShipping-/251534607654\">eBay</a>)</li>\r\n<li>2x TLC5940 PWM driver (<a href=\"http://www.ti.com/product/tlc5940\">Texas Instruments</a>)</li>\r\n</ul>\r\n<p>When saying that this system only costs four dollars, I am making some generous assumptions about the supplies you already have, namely an Arduino microcontroller and some wiring supplies. Nevertheless, cost can still be kept down with non-official Arduinos which are available for under &#36;10. Wires can be obtained at low cost and the PWM driver chip used for this project, the TLC5940, has free samples available for educational use.</p>\r\n<p>The Arduino was chosen for this project since it is easy to work with and communicates well with a computer. However, the Arduino Uno only has four PWM connections so the TLC5940 PWM driver was required in order to increase the number of PWM lines available. The TLC5940 provides an additional 16 PWM channels, however multiple chips can be chained together to increase this amount. Since I wanted to have 10 individually controlled RGB LEDs spaced out around the monitor, and each LED requires 3 PWM connections for each of the three colours, this would amount to 30 PWM channels which can be supplied by 2 TLC5940 chips. When selecting the RGB LEDs to buy, the main requirement was that they were common anode (the common connection is the voltage source) in order to work with the TLC5940 which can only sink current. Furthermore, I opted for larger 10mm and diffused LEDs to project out the light as much as possible and create more of a glowing effect.</p>\r\n<p>With these parts I had enough LEDs to place around the back of my monitor. Since each LED is controlled by its own PWM drivers on the TLC5940, each LED can have a unique colour instead of the more basic approach where the back of the monitor is illuminated by the average colour of the entire screen. This should give a more colourful result has different colours on the edges of the monitor are projected outwards.</p>\r\n<h2>Wiring</h2>\r\n<figure>\r\n<a href=\"article_images/11/full_Sketch 2_bb.png\">\r\n	<img class=\"img-thumbnail\" src=\"article_images/11/prev_Sketch 2_bb.png\"/>\r\n</a>\r\n<figcaption>Wiring diagram</figcaption>\r\n</figure>\r\n<p>All wiring for this project was performed on a bread board. Two TLC5940 where chained together and the first one was connected to the Arduino. The red, green, and blue components of the 10 RGB LEDs were each connected to the TLC5940s&#39; channels 0 through 29. And that&#39;s it; all power was transmitted through the USB connection.</p>\r\n<h2>Programming</h2>\r\n<figure>\r\n<a href=\"article_images/11/full_diagram2.jpg\">\r\n	<img class=\"img-thumbnail\" src=\"article_images/11/prev_diagram2.jpg\"/>\r\n</a>\r\n<figcaption>Red boxes indicate the areas sampled for their average colour</figcaption>\r\n</figure>\r\n<p>To determine the appropriate colour for each LED, a program written in C# ran on the host computer and determined the average colour of 10 locations around the screen where the LEDs were located, as seen in the above image. The upper and lower sample locations were moved away from the edge of the screen to better match a 16:9 aspect ratio on my 16:10 monitor. This prevented the black bars of letter boxed content from interfering with the projection of the actual content to the upper and lower locations behind the screen. The program transmitted the averaged RGB values for these sample locations to the Arduino using the Serial protocol over a USB connection. The Arduino&#39;s code read this Serial information and set the appropriate PWM signal for the channel controlling the LEDs color.</p>\r\n<h2>Conclusion</h2>\r\n<figure>\r\n<a href=\"article_images/11/full_IMG_6613.JPG\">\r\n	<img class=\"img-thumbnail\" src=\"article_images/11/prev_IMG_6613.JPG\"/>\r\n</a>\r\n<figcaption>The final setup</figcaption>\r\n</figure>\r\n<p>So what does a &#36;4 ambient light setup give you? I have to admit that I was a tad disappointed with the result. First off I had to limit the screen sampling rate to once per second. Since this program would be running on my PC at all times I wanted to keep its CPU usage low (below 10%), and this required me to reduce how often it read colour information from the screen. Secondly having the serial library running on the Arduino seems to effect the performance of the TLC5940, resulting in noticeably inaccurate colours, especially near white colours. In the end I found the setup to be a bit of a gimmick. The coolness factor of having colours bouncing around the back of your monitor wears off pretty quickly and doesn&#39;t account for the drawbacks.</p>\r\n<p>For someone looking for a fun, programming and electronic learning experience, you can&#39;t go wrong for only four dollars. However if you want a fully featured ambient light PC setup, I would recommend spending a bit more money and investing in more specialized hardware, such as addressable RGB LED strips. I myself am no longer using this setup, but I do plan to revisit this project in the future, perhaps with a less ambitious, single-coloured RGB LED strip.</p>\r\n<h2>Code</h2>\r\n<p><a href=\"https://github.com/Netopya/NetopyaAmbientLight\">GitHub <span class=\"glyphicon glyphicon-new-window\" aria-hidden=\"true\"></span></a></p>\r\n<h2>Videos</h2>\r\n<p>A video of the system displaying a Windows Media Player music visualizer</p>\r\n<div class=\"row\"><div class=\"col-sm-8 col-sm-offset-2 col-xs-12 centered_image\"><div class=\"embed-responsive embed-responsive-4by3\"><iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/z9RqdH6WB20\" frameborder=\"0\" allowfullscreen></iframe></div></div></div>\r\n<p>An early video testing the TLC5940s showing a rainbow pattern on the RGB LEDs</p>\r\n<div class=\"row\"><div class=\"col-sm-8 col-sm-offset-2 col-xs-12 centered_image\"><div class=\"embed-responsive embed-responsive-4by3\"><iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/FCKEEMjqrG0\" frameborder=\"0\" allowfullscreen></iframe></div></div></div>', 'http://www.netopyaplanet.com/article_images/11/full_IMG_6613.JPG', 'An awesome computer backlighting solution for only 4 dollars!', 0, 'PROJ', 'http://www.netopyaplanet.com/article_images/11/prev_IMG_6613.JPG'),
(12, 'Show images with an Arduino on a RGB LED Matrix', 1, '2016-07-10 18:19:58', '<div class=\"centered_image\"><a href=\"article_images/12/full_IMG_1819.jpg\"><img src=\"article_images/12/lrg_IMG_1819.jpg\" class=\"img-thumbnail\"/></a></div>\r\n<p>The Adafruit 1484 is an absolutely fantastic 32x32 LED matrix. Each one of the 1024 LEDs is an individually controllable RGB LED that allow us to display beautiful pixel art. First Robotics Competition team number 296, The Northern Knights, obtained this display to spruce up our robots. As a mentor on this team, I worked with students in order to develop a system with an Arduino to read images off a MicroSD card and display them on the LED matrix. Join us to learn the system inside out.</p>', '<h2>Parts</h2>\r\n<p>Our setup consists of only four components: an Arduino Mega, an Adafruit 1484 LED Matrix, a MicroSD card reader (Adafruit model number 254), and the wiring that connects everything together. In fact the wiring was such a mess that I created a custom Arduino shield to cleanly attach everything. We chose an Arduino Mega since the LED matrix and SD card reader libraries are quite heavy and we didn\'t want to risk running into any memory issues with and Arduino Uno.</p>\r\n<figure>\r\n    <a href=\"article_images/12/full_IMG_1909.jpg\"><img src=\"article_images/12/lrg_IMG_1909.jpg\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>Wiring setup without shield</figcaption>\r\n</figure>\r\n<h2>Custom Arduino Shield</h2>\r\n<p>The above images shows the wiring situation before I created the custom Arduino shield. It was a bit of a mess and I was particularly concerned that putting this setup on a jostling robot could cause issues. Therefore I designed a custom circuit board in Eagle PCB and had it manufactured through OSH Park. It routes all 16 connections from the LED matrix and all 6 connections from the SD card reader to the appropriate ports on the Arduino. Furthermore we added pin-outs for serial communication and digital IO so that we can add features in the future if we want, such as communicating with the main robot. There are also pin-outs for 12v and 5v power. The serial and power pin-outs have extra design redundancies with possibility of using standard 0.1\" pitch pins or screw terminals.</p>\r\n<figure>\r\n    <a href=\"article_images/12/full_IMG_1913.jpg\"><img src=\"article_images/12/lrg_IMG_1913.jpg\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>Wiring setup with the custom Arduino shield</figcaption>\r\n</figure>\r\n<div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n        <figure>\r\n            <a href=\"article_images/12/diagram.svg\"><img src=\"article_images/12/diagram.svg\" class=\"img-thumbnail\"/></a>\r\n            <figcaption>Custom Arduino shield PCB layout</figcaption>\r\n        </figure>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n        <figure>\r\n            <a href=\"article_images/12/wiringdiagram.svg\"><img src=\"article_images/12/wiringdiagram.svg\" class=\"img-thumbnail\"/></a>\r\n            <figcaption>Custom Arduino shield wiring diagram</figcaption>\r\n        </figure>\r\n    </div>\r\n</div>\r\n<h2>Software</h2>\r\n<p>The strategy I used to display images on the matrix was to store picture information in text format. Using regular image files is not straight forward due to the limit computing resources of the Arduino, so the decision to go with a custom text format that could be easily parsed was made. I created a Java application to run on a computer to process all the images and convert them into my text format. The text files would then be saved onto a MicroSD card that would be placed into a MicroSD card reader connected to the Arduino. To display the images the Arduino would read these text files and output their colour information to the LED matrix.</p>\r\n<p>The text file image format takes into consideration the facts that the images are 32x32 pixels and have 12-bit colour (This colour depth is a limitation of the Arduino\'s power as the matrix can display more). Since each pixel is 12-bits, each of the three colours (R, G, and B) is 4-bits which can be represented by a hexadecimal number. Therefore the image format consisted of 32 lines of text (for each of the 32 rows of pixels) and each row had 32 sets of pixel information. Each set of pixel information had 3 characters for each of the tree colours. These characters were text representations of a hexadecimal digit (<code>0</code> to <code>9</code>, followed by <code>a</code> to <code>f</code>). The astute among you will note that this is a waste of space since we are representing 4-bit RGB values with an 8-bit text character.  However each image is still just over 3 KB, which means we can still store over 1 million images on a regular 4 GB SD card. Furthermore working with bytes greatly simplifies coding, since on the Java side we just need to write a colour component\'s <code>toHexString</code> value to the text file, and on the Arduino side we can read these values by parsing the text files one byte at a time.</p>\r\n<p>Another feature of this format is that we can write an additional byte at the end of the text file to specify the duration we want to show the image for. By default images are shown for 10 seconds, however if this information is included the time can be adjusted to create animations by showing image frames more quickly, or by extending the duration of more prominent images. Currently values over 10 represent how many seconds to show the images for, while value less than 10 represent how many multiples of 300 milliseconds to display the image.</p>\r\n<figure>\r\n    <a href=\"article_images/12/full_Picture2.png\"><img src=\"article_images/12/lrg_Picture2_1.jpg\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>Diagram showing how image information from the text file is converted into a colour</figcaption>\r\n</figure>\r\n<p>I created a simple console Java application called RainConverter to convert a set of pictures into this text image format. Simply point the app to a folder containing a set of images already at a 32 by 32 resolution. The app uses the <code>javax.imageio</code> package so a generous amount of input formats are supported including jpeg, png, bmp, and gif. Going through each image, each pixel is passed through a gamma lookup table for the matrix that converts each colour component to 4-bits and applies a colour correction curve for the display (this table was copied directly from the Adafruit source code for the led matrix). Each colour component is then converted into a hexadecimal string so that each colour is represented by a single character (3 characters for a pixel). Timing information can now be specified and will be added to the end of the string sequence. The collection of these hex strings are packaged into text files that can be copied to the MicroSD card.</p>\r\n<p>On the Arduino side of things not much needs to be done since all of the images have been processed into data that can be easily outputted to the display. The main loop iterates through each text file on the MicroSD card in alphabetical order. For each file, three bytes are read at a time which make our three R, G, and B values. Note that they do go through a character to byte conversion to convert characters such as \"1\" to the numeric 1 and \"f\" to 15 since we are working with hexadecimal values. That\'s it! Each line in our text file is a pixel\'s Y coordinate, and we can count the number of 3-byte tuples we\'ve passed to find the X coordinate. Going through each pixel gives us a complete image on the LED matrix.</p>\r\n<figure>\r\n    <a href=\"article_images/12/full_IMG_1922.jpg\"><img src=\"article_images/12/lrg_IMG_1922.jpg\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>The LED matrix showing pictures at a robotics competition in our pit area</figcaption>\r\n</figure>\r\n<h2>Conclusion</h2>\r\n<p>Working with the Adafruit 1484 LED matrix has been a great learning experience. Since we obtained the display for the robotics team in 2014, we\'ve been improving the software and electrical layout to find new ways to incorporate the display into our team\'s projects. In 2014 we had the display on our robot showing a slideshow of images while we competed. In 2015 we moved the LED matrix into our pit area due to real estate limitations of that year\'s bot. Looking forward, we may be considering using different boards such as the Raspberry Pi to control the display in order to show more complex animations. As always, source code for the Arduino displayer and Java image conversion can be found on GitHub at the following links.</p>\r\n<h2>Code</h2>\r\n<p><a href=\"https://github.com/Netopya/dsplyr\">Arduino image displayer \"dsplyr\" <span class=\"glyphicon glyphicon-new-window\" aria-hidden=\"true\"></span></a></p>\r\n<p><a href=\"https://github.com/Netopya/RainConverter\">Java image converter \"RainConverter\" <span class=\"glyphicon glyphicon-new-window\" aria-hidden=\"true\"></span></a></p>\r\n<h2>CAD</h2>\r\n<p><a href=\"http://netopyaplanet.com/article_code/FRC296LEDmatrix2.zip\">EAGLE CAD Sketch and Board files <span class=\"glyphicon glyphicon-download\" aria-hidden=\"true\"></span></a></p>', 'http://netopyaplanet.com/article_images/12/full_IMG_1819.JPG', 'The Adafruit 1484 is an absolutely fantastic 32x32 LED matrix. Each one of the 1024 LEDs is an individually controllable RGB LED that allow us to display beautiful pixel art. First Robotics Competition team number 296, The Northern Knights, obtained this display to spruce up our robots. As a mentor on this team, I worked with students in order to develop a system with an Arduino to read images off a MicroSD card and display them on the LED matrix. Join us to learn the system inside out.', 0, 'PROJ', 'http://netopyaplanet.com/article_images/12/full_IMG_1819.JPG'),
(13, 'Improving JavaScript Code Quality', 1, '2016-08-27 21:45:34', '<div class=\"centered_image\"><a href=\"article_images/13/ori_Capture_sq1.png\"><img src=\"article_images/13/thb_Capture_sq1.png\" class=\"img-thumbnail\"/></a></div>\r\n<p>Coding conventions and code quality are practices of programming that are often ignored by many of us software developers. However when working on a school project with 6 other peers, I was responsible for setting up a program called SonarQube to analyze the quality of our code. Not only did SonarQube detect multiple quality issues with our code base, it also provided many useful suggestions to improve code readability, increase robustness against bugs, and every prevent security risks. The following blog post is based off of an e-mail that I wrote to the team explaining many common software quality issues that were arising in our code along with suggestions on how we could improve. I find that many of these tips can be applied to any JavaScript project and I am personally always taking them into account when I program web applications.</p>', '<h2>Using spaces instead of tabs</h2>\r\n<p>Developers should be in the habit of using spaces instead of tabs to indent and indicate structure in their code. Different editors can interpret tabs differently and give the white space they represent a different width. Code that is indented one way for a developer might appear differently on another developer\'s computer. This is especially a problem when there is a mix of tabs and spaces leading to indentation of lines can become really out of hand. One area where we had issues was with our code review tool Review Ninja which had a wider interpretation of tabs. This caused lines of code prefixed with tabs to seem more intended that lines with spaces. Reviewing code was much harder since lines would be randomly indented and it would be more difficult to read the structure of our code.</p>\r\n<figure>\r\n    <a href=\"article_images/13/ori_Capture_ninja2.png\"><img src=\"article_images/13/thb_Capture_ninja2.png\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>An example of inconsistent indenting due to the mix of tabs and spaces in Review Ninja</figcaption>\r\n</figure>\r\n<p>Most editors use a monospace font so spaces are always the same size as all the other characters and everything is kept in proportion. We established a convention of indenting lines with 4 spaces, which is pretty standard. Most text editors can be configured to insert tabs in the place of spaces. In Notepad++ simply navigate to <code>Settings>Preferences...>Tab Settings</code> and check <code>Replace by space</code>.</p>\r\n<p>Another quality issue that falls into this category of whitespace management is trailing whitespaces. They are useless and could cause issues when comparing versions of code as shown in the image below. The conversion of tabs into spaces and the removal of trailing whitespaces can be easily automated. In our project, since we only had a few files, I would manually open each file and apply the \"TAB to Space\" and \"Trim Trailing Space\" under \"Edit->Blank Operations\" in Notepad++ at the end of each Sprint to remove any whitespace problems that managed to sneak their way into our code.</p>\r\n<figure>\r\n    <a href=\"article_images/13/ori_Capture_meld1.png\"><img src=\"article_images/13/thb_Capture_meld1.png\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>Notice this comparison in Meld that a line edit is being indicated. In reality the programmer added some lines, but the trailing whitespace results in the action being classified differently. This slows down code checking since we need to more closely analyze what the programmer did.</figcaption>\r\n</figure>\r\n<h2>Triple Equals</h2>\r\n<p>A common confusion in JavaScript is the difference between using double equals (<code>==</code>) and triple equals (<code>===</code>). Programmers are often familiar with writing <code>==</code> from other programming languages and end up using the same <code>==</code> when programming in JavaScript. However, it is JavaScript\'s <code>===</code> that exhibits equality checking behaviour closest to the <code>==</code> of languages such as Java and C#. In Javascript <code>===</code> checks if two variables are of the same type and the same value. When <code>==</code> is used, if the variables are not of the same type, it will attempt to cast them to the same type so that their values can be compared. This casting operation may produce unexpected results and not cast our variable to a value that is appropriate for comparisons.</p>\r\n<figure>\r\n    <blockquote><p>Double equals is described as triple equals\' evil brother, so due to the team\'s political alignments we should stick with the good guys.</p></blockquote>\r\n    <figcaption>A quote from the e-mail sent to the team regarding code quality</figcaption>\r\n</figure>\r\n<p>For programmers unfamiliar with JavaScript, it is best to use <code>===</code> since this will behave like they are used to from other programming languages. If using a <code>===</code> doesn\'t work while using <code>==</code> does work, there is probably something wrong with your code where you end up comparing variables of different types. An example from our project was a case where we were checking the equality between two variables storing an id number. The variables where never equal when using <code>===</code>, but switching it to <code>==</code> worked as expected. The issue originated from an id value that was extracted from a string but never converted to an integer. Therefore, the equality check was comparing an id number with another id number but encoded as a string. Although this section of the code worked when using <code>==</code>, using <code>===</code> allowed us to notice our oversight, program the code to execute as we expected it too, and also to avoid further errors later in the code.</p>\r\n<h2>Semicolons after functions</h2>\r\n<p>In JavaScript there is a distinction between  <i>Function Declarations</i> and <i>Function Expressions</i>. Function Declarations are free hanging functions that can be accessed within their scope. Function Expressions are defined functions that are passed to a variable. Function Expressions should have a semicolon at the end of their statements, Function Declarations should not.</p>\r\n<h3>Some examples:</h3>\r\n<div class=\"table-responsive\">\r\n    <table class=\"table table-bordered\">\r\n        <thead>\r\n            <th>Function type</th>\r\n            <th class=\"success\">Good</th>\r\n            <th class=\"danger\">Bad</th>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <th scope=\"row\">Function Declaration</th>\r\n                <td>\r\n                    <code>\r\n                        function nodesInEdges(a,b) {</br>\r\n                        //...</br>\r\n                        } //Good :)\r\n                    </code>\r\n                </td>\r\n                <td>\r\n                    <code>\r\n                        function LanguageText() {</br>\r\n                        //...</br>\r\n                        }; //Bad :(\r\n                    </code>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th scope=\"row\">Function Expression</th>\r\n                <td>\r\n                    <code>\r\n                        this.toJSON = function() {</br>\r\n                        //...</br>\r\n                        }? //Good :)\r\n                    </code>\r\n                </td>\r\n                <td>\r\n                    <code>\r\n                        this.addPair = function(lang, value){</br>\r\n                        //...</br>\r\n                        } //Bad :(\r\n                    </code>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n<p>Often, this is usually not an issue since JavaScript is able to implicitly add a semicolon at the end of the statements where they were missing, but this may not always be the case. Basically if there\'s an equal sign, there should be a semicolon.</p>\r\n<h2>Foreach loops require var declaration</h2>\r\n<p>When using foreach loops, one should make sure to add var to the variable declaration, else JavaScript will create a global instance of the variable which can produce unpredictable results.</p>\r\n<div class=\"table-responsive\">\r\n    <table class=\"table table-bordered\">\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    <code>\r\n                        for(val in POIList){</br>\r\n                        // Bad :(</br>\r\n                        }\r\n                    </code>\r\n                </td>\r\n                <td>\r\n                    <code>\r\n                        for(var val in POIList){</br>\r\n                        // Good :)</br>\r\n                        }\r\n                    </code>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n<h2>Commented out code</h2>\r\n<p>A pretty big pet peeve of mine is to leave commended out code trailing around. I always recommend to use Git for even small projects which allows referencing previous versions of one\'s software. If you wish to archive something, commit what you have, then remove the commented code or any code you don\'t need in the foreseeable future, then commit your clean and shiny non-commented out code :)</p>\r\n<figure>\r\n    <a href=\"article_images/13/ori_Capture_commented_code.png\"><img src=\"article_images/13/thb_Capture_commented_code.png\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>A git commit where commented code is replaced with the completed implementation</figcaption>\r\n</figure>\r\n<h2>TODO comments</h2>\r\n<p>Programmers sometimes like to leave comments prefixed with TODO to indicate work that needs to be done inside the actual code itself. This is a very messy way of keeping track of what needs to be done and you should consider using a task or project management system. If something still needs to be done submit a ticket in your management software and. For our project in particular using TODO comments ways particularly gnarly since we were already using JIRA for task management. My compromise to the team was to resolve any TODO comments they generated by the end of the Sprint to avoid the technical debt created from combing through the code and evaluating TODO comments against tasks in JIRA.</p>\r\n<figure>\r\n    <a href=\"article_images/13/ori_Capture_todo2.png\"><img src=\"article_images/13/thb_Capture_todo2.png\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>An example warning message from SonarQube of a lingering TODO comment</figcaption>\r\n</figure>\r\n<h2>Alerts</h2>\r\n<p>Using JavaScript alerts is a security issue since they are mainly used for debugging purposes and their presence could indicate forgotten development code. Anything that is interacting with the user should provide a better user experience then native JavaScript alerts anyway. There are JavaScript libraries (such as <a href=” http://bootboxjs.com/”>Bootbox.js</a>) that accomplish this, or you can create your own custom notification system with better custom styling.</p>\r\n<figure>\r\n    <a href=\"article_images/13/ori_Capture_alert1.png\"><img src=\"article_images/13/thb_Capture_alert1.png\" class=\"img-thumbnail\"/></a>\r\n    <figcaption>SonarQube\'s rule regarding regular JavaScript alerts</figcaption>\r\n</figure>\r\n<p>Happy coding!</p>', 'http://netopyaplanet.com/article_images/13/ori_Capture_sq1.png', 'Learn from the common coding quality mistakes we made in our software engineering project as pointed out by SonarQube.', 0, 'TUT', 'article_images/13/ori_Capture_sq1.png'),
(14, 'Introducing Chrome Memory Checker', 1, '2017-05-28 19:20:57', '<div class=\"centered_image\"><img src=\"article_images/screenshot4.jpg\" class=\"img-thumbnail\"/></div><p>The Google Chrome web browser is a program notorious for gobbling up your computer\'s RAM. Chrome Memory Checker is a simple program to see exactly how much RAM Chrome is using. Since Chrome uses multiple processes it is not as simple as opening up task manager and observing how much memory some Chrome process is using. Chrome Memory Checker sums up all the memory that the various Chrome processes are using and gives you the grand total! By continuously monitoring Chrome processes Chrome Memory Checker keeps track of total RAM usage in real time. For heavy Chrome users like me with over 40 tabs open on a regular basis, the number certainly surprised me at 8.26Gb, with usage sometimes peaking at 11Gb. Yikes! Chrome Memory Checker can help you diagnose RAM usage issues and determine whether Chrome is in fact at fault or not.</p>\r\n<span><a href=\"https://github.com/Netopya/Chrome-Memory-Checker/releases/download/release1/ChromeMemoryChecker.zip\" class=\"btn btn-primary\" role=\"button\"><span class=\"glyphicon glyphicon-download\" aria-hidden=\"true\"></span> Download Executable</a> Windows (for 64-bit Chrome) only </span></br>\r\n<br/>\r\n', '<a href=\"https://github.com/Netopya/Chrome-Memory-Checker\" class=\"btn btn-default\" role=\"button\"><span class=\"glyphicon glyphicon-folder-open\" aria-hidden=\"true\"></span> View source on GitHub</a>', 'http://www.netopyaplanet.com/article_images/screenshot4.jpg', 'The Google Chrome web browser is a program notorious for gobbling up your computer\'s RAM. Chrome Memory Checker is a simple program to see exactly how much RAM Chrome is using.', 0, 'TOOL', 'article_images/screenshot4.jpg');

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

CREATE TABLE `comments` (
  `id` int(10) NOT NULL,
  `username` varchar(100) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT current_timestamp(),
  `comment` varchar(10000) NOT NULL,
  `e_mail` varchar(100) NOT NULL,
  `website` varchar(1000) NOT NULL,
  `article_id` int(10) NOT NULL,
  `enabled` tinyint(1) NOT NULL DEFAULT 0,
  `ip_adress` varchar(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `comments`
--


-- --------------------------------------------------------

--
-- Table structure for table `galleries`
--

CREATE TABLE `galleries` (
  `id` int(11) NOT NULL,
  `name` varchar(1000) NOT NULL,
  `description` mediumtext NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

--
-- Dumping data for table `galleries`
--

INSERT INTO `galleries` (`id`, `name`, `description`, `timestamp`) VALUES
(1, 'Test Gallery', 'Testing galleries with sample images', '2013-06-20 15:52:25');

-- --------------------------------------------------------

--
-- Table structure for table `gallery_images`
--

CREATE TABLE `gallery_images` (
  `id` int(11) NOT NULL,
  `gallery_id` int(11) NOT NULL,
  `name` varchar(1000) NOT NULL,
  `description` mediumtext NOT NULL,
  `thb_url` varchar(1000) NOT NULL,
  `lrg_url` varchar(1000) NOT NULL,
  `full_url` varchar(1000) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

--
-- Dumping data for table `gallery_images`
--

INSERT INTO `gallery_images` (`id`, `gallery_id`, `name`, `description`, `thb_url`, `lrg_url`, `full_url`, `timestamp`) VALUES
(1, 1, 'Chrysanthemum', 'Ooo red flowers', 'gallery_images/1/thb/thb_Chrysanthemum.jpg', 'gallery_images/1/lrg/lrg_Chrysanthemum.jpg', 'gallery_images/1/full/full_Chrysanthemum.jpg', '2013-06-20 15:55:31'),
(2, 1, 'Desert', 'Quite an interesting desert', 'gallery_images/1/thb/thb_Desert.jpg', 'gallery_images/1/lrg/lrg_Desert.jpg', 'gallery_images/1/full/full_Desert.jpg', '2013-06-20 15:55:31'),
(3, 1, 'Hydrangeas', 'Moar pretty flowers but white!', 'gallery_images/1/thb/thb_Hydrangeas.jpg', 'gallery_images/1/lrg/lrg_Hydrangeas.jpg', 'gallery_images/1/full/full_Hydrangeas.jpg', '2013-06-20 16:11:35'),
(4, 1, 'Jellyfish', 'Why is it called that if it is neither a fish or jelly?', 'gallery_images/1/thb/thb_Jellyfish.jpg', 'gallery_images/1/lrg/lrg_Jellyfish.jpg', 'gallery_images/1/full/full_Jellyfish.jpg', '2013-06-20 16:12:14'),
(5, 1, 'Koala', 'This bear from australia is the mascot of some elementary schools', 'gallery_images/1/thb/thb_Koala.jpg', 'gallery_images/1/lrg/lrg_Koala.jpg', 'gallery_images/1/full/full_Koala.jpg', '2013-06-20 16:13:05'),
(6, 1, 'Lighthouse', 'These are usually found along the coast', 'gallery_images/1/thb/thb_Lighthouse.jpg', 'gallery_images/1/lrg/lrg_Lighthouse.jpg', 'gallery_images/1/full/full_Lighthouse.jpg', '2013-06-20 16:13:47'),
(7, 1, 'Penguins', 'Their wearing tuxes! Quite nice', 'gallery_images/1/thb/thb_Penguins.jpg', 'gallery_images/1/lrg/lrg_Penguins.jpg', 'gallery_images/1/full/full_Penguins.jpg', '2013-06-20 16:14:29'),
(8, 1, 'Tulips', 'ing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\r\n\r\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using \\\'Content here, content here\\\', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for \\\'lorem ipsum\\\' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\r\n\r\n \r\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \\&quot;de Finibus Bonorum et Malorum\\&quot; (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \\&quot;Lorem ipsum dolor sit amet..\\&quot;, comes from a line in section 1.10.32.\r\n\r\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \\&quot;de Finibus Bonorum et Malorum\\&quot; by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\r\n\r\nThere are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don\\\'t look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn\\\'t anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.\r\n\r\n	\r\n	paragraphs\r\n	words\r\n	bytes\r\n	lists\r\nStart with \\\'Lorem\r\nipsum dolor sit amet...\\\'\r\n', 'gallery_images/1/thb/thb_Tulips.jpg', 'gallery_images/1/lrg/lrg_Tulips.jpg', 'gallery_images/1/full/full_Tulips.jpg', '2013-06-20 16:15:04'),
(9, 2, 'CADRender', 'Rendering of the final assembly of my charging station in Inventor', 'gallery_images/2/thb/thb_Charger2_2.png', 'gallery_images/2/lrg/lrg_Charger2_2.png', 'gallery_images/2/full/full_Charger2_2.png', '2013-07-20 22:26:06'),
(10, 2, 'Exploded View', 'An exploded view of the assembly created in Inventor', 'gallery_images/2/thb/thb_Presentation1_2.png', 'gallery_images/2/lrg/lrg_Presentation1_2.png', 'gallery_images/2/full/full_Presentation1_2.png', '2013-07-20 22:27:54'),
(11, 2, 'Sketching', 'Transferring dimensions from the sketches to the pieces of wood ', 'gallery_images/2/thb/thb_IMG_5649.JPG', 'gallery_images/2/lrg/lrg_IMG_5649.JPG', 'gallery_images/2/full/full_IMG_5649.JPG', '2013-07-20 22:29:34'),
(12, 2, 'Cutting the wood', 'Look at the saw go!', 'gallery_images/2/thb/thb_IMG_5652.JPG', 'gallery_images/2/lrg/lrg_IMG_5652.JPG', 'gallery_images/2/full/full_IMG_5652.JPG', '2013-07-20 22:30:05'),
(13, 2, 'Final Cut', 'An interesting shot. One last jigsaw cut between the two drill holes to finish the top piece.', 'gallery_images/2/thb/thb_IMG_5653.JPG', 'gallery_images/2/lrg/lrg_IMG_5653.JPG', 'gallery_images/2/full/full_IMG_5653.JPG', '2013-07-20 22:31:23'),
(14, 2, 'Sanding', 'Sanding the pieces with the palm sander ', 'gallery_images/2/thb/thb_IMG_5655.JPG', 'gallery_images/2/lrg/lrg_IMG_5655.JPG', 'gallery_images/2/full/full_IMG_5655.JPG', '2013-07-20 22:33:52'),
(15, 2, 'Pieces', 'All the pieces cut and sanded', 'gallery_images/2/thb/thb_IMG_5657.JPG', 'gallery_images/2/lrg/lrg_IMG_5657.JPG', 'gallery_images/2/full/full_IMG_5657.JPG', '2013-07-20 22:47:55'),
(16, 2, 'First Assembly', 'The bottom part of the charging station assembled.', 'gallery_images/2/thb/thb_IMG_5661.JPG', 'gallery_images/2/lrg/lrg_IMG_5661.JPG', 'gallery_images/2/full/full_IMG_5661.JPG', '2013-07-20 22:48:48'),
(17, 2, 'Plastic Wood', 'First application of plastic wood', 'gallery_images/2/thb/thb_IMG_5662.JPG', 'gallery_images/2/lrg/lrg_IMG_5662.JPG', 'gallery_images/2/full/full_IMG_5662.JPG', '2013-07-20 22:49:27'),
(18, 2, 'Finishing', 'Close-up after sanding the last application of plastic wood', 'gallery_images/2/thb/thb_IMG_5690.JPG', 'gallery_images/2/lrg/lrg_IMG_5690.JPG', 'gallery_images/2/full/full_IMG_5690.JPG', '2013-07-20 22:50:27'),
(19, 2, 'Staining', 'The pieces stained on exterior surfaces', 'gallery_images/2/thb/thb_IMG_5710.JPG', 'gallery_images/2/lrg/lrg_IMG_5710.JPG', 'gallery_images/2/full/full_IMG_5710.JPG', '2013-07-20 22:51:17'),
(20, 2, 'Tray Surface', 'The fancy fabric glued to the top of the tray', 'gallery_images/2/thb/thb_IMG_5713.JPG', 'gallery_images/2/lrg/lrg_IMG_5713.JPG', 'gallery_images/2/full/full_IMG_5713.JPG', '2013-07-20 22:53:15'),
(21, 2, 'Gluing', 'Pressing the pieces together with tons of books!', 'gallery_images/2/thb/thb_IMG_5716.JPG', 'gallery_images/2/lrg/lrg_IMG_5716.JPG', 'gallery_images/2/full/full_IMG_5716.JPG', '2013-07-20 22:54:10'),
(22, 2, 'Assembly Done', 'All that\\\'s left is adding the charging accessories', 'gallery_images/2/thb/thb_IMG_5719.JPG', 'gallery_images/2/lrg/lrg_IMG_5719.JPG', 'gallery_images/2/full/full_IMG_5719.JPG', '2013-07-20 22:55:46'),
(23, 2, 'Mounting screws', 'Screws to attach the power bar', 'gallery_images/2/thb/thb_IMG_5721.JPG', 'gallery_images/2/lrg/lrg_IMG_5721.JPG', 'gallery_images/2/full/full_IMG_5721.JPG', '2013-07-20 22:56:45'),
(24, 2, 'Wiring', 'All the wires neatly wrapped and tucked away ', 'gallery_images/2/thb/thb_IMG_5741.JPG', 'gallery_images/2/lrg/lrg_IMG_5741.JPG', 'gallery_images/2/full/full_IMG_5741.JPG', '2013-07-20 22:57:31'),
(25, 2, 'Devices charging!', 'Final shot with devices charging up', 'gallery_images/2/thb/thb_IMG_5757.JPG', 'gallery_images/2/lrg/lrg_IMG_5757.JPG', 'gallery_images/2/full/full_IMG_5757.JPG', '2013-07-20 22:58:55'),
(26, 2, 'Final Setup', 'Now for an awesome place for the station on my desk', 'gallery_images/2/thb/thb_IMG_5738.JPG', 'gallery_images/2/lrg/lrg_IMG_5738.JPG', 'gallery_images/2/full/full_IMG_5738.JPG', '2013-07-20 22:59:52'),
(27, 3, 'Real Time Clock', 'Close up of the half soldered RTC PCB', 'gallery_images/3/thb/thb_IMG_5621.JPG', 'gallery_images/3/lrg/lrg_IMG_5621.JPG', 'gallery_images/3/full/full_IMG_5621.JPG', '2013-08-25 19:30:49'),
(28, 3, 'Project Box', 'Cutting openings in the project box for visible components', 'gallery_images/3/thb/thb_IMG_5624.JPG', 'gallery_images/3/lrg/lrg_IMG_5624.JPG', 'gallery_images/3/full/full_IMG_5624.JPG', '2013-08-25 19:31:45'),
(29, 3, 'Segmented Display', 'The breadboard holding the segmented LED display along with controlling shift registers', 'gallery_images/3/thb/thb_IMG_5627.JPG', 'gallery_images/3/lrg/lrg_IMG_5627.JPG', 'gallery_images/3/full/full_IMG_5627.JPG', '2013-08-25 19:32:55'),
(30, 3, 'Inside the box', 'What a mess of wires!', 'gallery_images/3/thb/thb_IMG_5628.JPG', 'gallery_images/3/lrg/lrg_IMG_5628.JPG', 'gallery_images/3/full/full_IMG_5628.JPG', '2013-08-25 19:34:18'),
(31, 3, 'Circuit Diagram', 'Here is a complete circuit diagram of the project', 'gallery_images/3/thb/thb_Sketch', 'gallery_images/3/lrg/lrg_Sketch', 'gallery_images/3/full/full_Sketch', '2013-08-25 19:35:02'),
(32, 3, 'Final Device', 'The AEMD strikes a pose in its final form', 'gallery_images/3/thb/thb_IMG_5781.JPG', 'gallery_images/3/lrg/lrg_IMG_5781.JPG', 'gallery_images/3/full/full_IMG_5781.JPG', '2013-08-25 20:02:02'),
(33, 4, 'Testing Breadboard', 'The setup we used to test the system', 'gallery_images/4/thb/thb_IMG_5841.jpg', 'gallery_images/4/lrg/lrg_IMG_5841.jpg', 'gallery_images/4/full/full_IMG_5841.JPG', '2014-06-23 00:25:21'),
(34, 4, 'Breadboard with Annotations', 'The Color Sensors, I2C Multiplexer, Arduino, and FTDI breakout are highlighted', 'gallery_images/4/thb/thb_IMG_5841-Copy.jpg', 'gallery_images/4/lrg/lrg_IMG_5841-Copy.jpg', 'gallery_images/4/full/full_IMG_5841-Copy.JPG', '2014-06-23 00:26:35'),
(35, 4, 'Circuit Diagram', 'A circuit diagram of this project created in Fritzing', 'gallery_images/4/thb/thb_colorsensordia1_bb.jpg', 'gallery_images/4/lrg/lrg_colorsensordia1_bb.jpg', 'gallery_images/4/full/full_colorsensordia1_bb.png', '2014-06-23 00:27:32'),
(36, 4, 'Processing App Screenshot', 'An orange ball was placed over the 4th color sensor.', 'gallery_images/4/thb/thb_screenshot2.jpg', 'gallery_images/4/lrg/lrg_screenshot2.jpg', 'gallery_images/4/full/full_screenshot2.JPG', '2014-06-23 00:29:44'),
(37, 4, 'Code to Comment', 'Remember to comment out this line of code from the Adafruit color sensor library cpp file', 'gallery_images/4/thb/thb_notethis.jpg', 'gallery_images/4/lrg/lrg_notethis.jpg', 'gallery_images/4/full/full_notethis.PNG', '2014-06-23 00:30:35'),
(38, 5, 'Setup Overview', 'An overview of the entire setup with peripherals and computing parts ', 'gallery_images/5/thb/thb_IMG_6584.JPG', 'gallery_images/5/lrg/lrg_IMG_6584.JPG', 'gallery_images/5/full/full_IMG_6584.JPG', '2014-12-15 20:18:55'),
(39, 5, 'Electronic Parts with Anotations', 'The main parts of the setup with a short description', 'gallery_images/5/thb/thb_IMG_6599_anot.JPG', 'gallery_images/5/lrg/lrg_IMG_6599_anot.JPG', 'gallery_images/5/full/full_IMG_6599_anot.JPG', '2014-12-15 20:20:13'),
(40, 5, 'Closeup view', 'Closeup of the boards connected with the display', 'gallery_images/5/thb/thb_IMG_6591.JPG', 'gallery_images/5/lrg/lrg_IMG_6591.JPG', 'gallery_images/5/full/full_IMG_6591.JPG', '2014-12-15 20:22:02'),
(41, 5, 'LCD Display', 'Closeup view of the LCD display', 'gallery_images/5/thb/thb_IMG_6590.JPG', 'gallery_images/5/lrg/lrg_IMG_6590.JPG', 'gallery_images/5/full/full_IMG_6590.JPG', '2014-12-15 20:23:02'),
(42, 5, 'Boards', 'Closeup view of the LCD Controller boards with the Raspberry Pi', 'gallery_images/5/thb/thb_IMG_6595.JPG', 'gallery_images/5/lrg/lrg_IMG_6595.JPG', 'gallery_images/5/full/full_IMG_6595.JPG', '2014-12-15 20:25:06'),
(43, 5, 'Board Top-down View', 'Top-down view of the LCD Controller boards with the Raspberry Pi', 'gallery_images/5/thb/thb_IMG_6599.JPG', 'gallery_images/5/lrg/lrg_IMG_6599.JPG', 'gallery_images/5/full/full_IMG_6599.JPG', '2014-12-15 20:26:42'),
(44, 5, 'Display Back', 'Back view of the display with the LCD Controller board power supply and the original laptop frame', 'gallery_images/5/thb/thb_IMG_6601.JPG', 'gallery_images/5/lrg/lrg_IMG_6601.JPG', 'gallery_images/5/full/full_IMG_6601.JPG', '2014-12-15 20:27:47'),
(45, 5, 'Back Top View', 'View of the display from the back with peripherals and the Raspberry Pi peeking on the right.', 'gallery_images/5/thb/thb_IMG_6605.JPG', 'gallery_images/5/lrg/lrg_IMG_6605.JPG', 'gallery_images/5/full/full_IMG_6605.JPG', '2014-12-15 20:28:52'),
(46, 5, 'Testing the LCD Controller', 'I did a quick test when I first got the LCD Controller by hooking it up to a another laptop to act as an external display', 'gallery_images/5/thb/thb_IMG_6554.JPG', 'gallery_images/5/lrg/lrg_IMG_6554.JPG', 'gallery_images/5/full/full_IMG_6554.JPG', '2014-12-15 21:03:47'),
(47, 6, 'Unboxing', 'The OPUS reader, a USB Mini-B cable, and a French instruction card were included in the packaging', 'gallery_images/6/thb/thb_IMG_6679.jpg', 'gallery_images/6/lrg/lrg_IMG_6679.jpg', 'gallery_images/6/full/full_IMG_6679.jpg', '2015-08-17 17:50:10'),
(48, 6, 'Reader and Cable', 'The OPUS card reader with the USB cable', 'gallery_images/6/thb/thb_IMG_6680.jpg', 'gallery_images/6/lrg/lrg_IMG_6680.jpg', 'gallery_images/6/full/full_IMG_6680.jpg', '2015-08-17 17:51:39'),
(49, 6, 'OPUS card in the reader', 'The OPUS card easily inserts itself into the front of the reader', 'gallery_images/6/thb/thb_IMG_6684.jpg', 'gallery_images/6/lrg/lrg_IMG_6684.jpg', 'gallery_images/6/full/full_IMG_6684.jpg', '2015-08-17 17:54:55'),
(50, 6, 'Reader connect to the computer', 'The reader connects to any USB port on your computer', 'gallery_images/6/thb/thb_IMG_6696.jpg', 'gallery_images/6/lrg/lrg_IMG_6696.jpg', 'gallery_images/6/full/full_IMG_6696.jpg', '2015-08-17 17:55:48'),
(51, 6, 'Card reader working', 'Two lights on the reader indicate its status with a power light and activity indicator', 'gallery_images/6/thb/thb_IMG_6700.jpg', 'gallery_images/6/lrg/lrg_IMG_6700.jpg', 'gallery_images/6/full/full_IMG_6700.jpg', '2015-08-17 17:57:21'),
(52, 6, 'No hassle detection', 'The reader is properly recognized by the computer without any manual intervention', 'gallery_images/6/thb/thb_1Capture2.jpg', 'gallery_images/6/lrg/lrg_1Capture2.jpg', 'gallery_images/6/full/full_1Capture2.png', '2015-08-17 17:58:53'),
(53, 6, 'Chrome Unsupported', 'The latest version of Google Chrome does not support Java, making the browser incompatible', 'gallery_images/6/thb/thb_2Capture4.jpg', 'gallery_images/6/lrg/lrg_2Capture4.jpg', 'gallery_images/6/full/full_2Capture4.png', '2015-08-17 17:59:53'),
(54, 6, 'Java step one', 'You first need to allow Java to run in the broswer', 'gallery_images/6/thb/thb_3Capture5.jpg', 'gallery_images/6/lrg/lrg_3Capture5.jpg', 'gallery_images/6/full/full_3Capture5.png', '2015-08-17 18:01:22'),
(55, 6, 'Java step two', 'Next you must allow Java on the page', 'gallery_images/6/thb/thb_4Picture1_1.jpg', 'gallery_images/6/lrg/lrg_4Picture1_1.jpg', 'gallery_images/6/full/full_4Picture1_1.png', '2015-08-17 18:01:59'),
(56, 6, 'Java step three', 'Finally you must authorize the execution of the Java applet', 'gallery_images/6/thb/thb_5Capture6.jpg', 'gallery_images/6/lrg/lrg_5Capture6.jpg', 'gallery_images/6/full/full_5Capture6.png', '2015-08-17 18:03:00'),
(57, 6, 'Reading the card', 'The contents of the card are read quickly', 'gallery_images/6/thb/thb_6Picture2_1.jpg', 'gallery_images/6/lrg/lrg_6Picture2_1.jpg', 'gallery_images/6/full/full_6Picture2_1.png', '2015-08-17 18:03:39'),
(58, 6, 'Card contents', 'The contents of my card are displayed with last month\\\'s buss pass and two train tickets', 'gallery_images/6/thb/thb_7Capture8.jpg', 'gallery_images/6/lrg/lrg_7Capture8.jpg', 'gallery_images/6/full/full_7Capture8.png', '2015-08-17 18:04:22'),
(59, 6, 'Checkout', 'You can review your purchase before proceeding to payment', 'gallery_images/6/thb/thb_8Capture10.jpg', 'gallery_images/6/lrg/lrg_8Capture10.jpg', 'gallery_images/6/full/full_8Capture10.png', '2015-08-17 18:05:21'),
(60, 6, 'Payment', 'Payment requires just a few bits of information', 'gallery_images/6/thb/thb_9Capture12.jpg', 'gallery_images/6/lrg/lrg_9Capture12.jpg', 'gallery_images/6/full/full_9Capture12.png', '2015-08-17 18:08:47'),
(61, 6, 'Verifying the credit card', 'The purchase is charged to the credit card', 'gallery_images/6/thb/thb_10Picture3_1.jpg', 'gallery_images/6/lrg/lrg_10Picture3_1.jpg', 'gallery_images/6/full/full_10Picture3_1.png', '2015-08-17 18:09:29'),
(62, 6, 'Recharging the card', 'The purchased fare is loaded onto the card', 'gallery_images/6/thb/thb_11Picture4_1.jpg', 'gallery_images/6/lrg/lrg_11Picture4_1.jpg', 'gallery_images/6/full/full_11Picture4_1.png', '2015-08-17 18:10:03'),
(63, 6, 'Purchase confirmation', 'Confirmation of the transaction is displayed with the newly loaded fare indicated', 'gallery_images/6/thb/thb_12Capture13_14_1.jpg', 'gallery_images/6/lrg/lrg_12Capture13_14_1.jpg', 'gallery_images/6/full/full_12Capture13_14_1.png', '2015-08-17 18:11:06'),
(64, 6, 'Receipt', 'An electronic copy of the receipt is provided', 'gallery_images/6/thb/thb_13Capture15.jpg', 'gallery_images/6/lrg/lrg_13Capture15.jpg', 'gallery_images/6/full/full_13Capture15.png', '2015-08-17 18:11:48');

-- --------------------------------------------------------

-- --------------------------------------------------------

--
-- Table structure for table `test`
--

CREATE TABLE `test` (
  `id` tinyint(4) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(10) NOT NULL,
  `pseudo_name` varchar(1000) NOT NULL,
  `e_mail` varchar(1000) NOT NULL,
  `timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `pseudo_name`, `e_mail`, `timestamp`) VALUES
(1, 'Netopya', 'netopya@netopyaplanet.com', '2013-05-29 17:47:48');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `galleries`
--
ALTER TABLE `galleries`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `gallery_images`
--
ALTER TABLE `gallery_images`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `iplogs`
--
ALTER TABLE `iplogs`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `test`
--
ALTER TABLE `test`
  ADD PRIMARY KEY (`id`),
  ADD KEY `id` (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `articles`
--
ALTER TABLE `articles`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;

--
-- AUTO_INCREMENT for table `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3214;

--
-- AUTO_INCREMENT for table `galleries`
--
ALTER TABLE `galleries`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `gallery_images`
--
ALTER TABLE `gallery_images`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=65;

--
-- AUTO_INCREMENT for table `iplogs`
--
ALTER TABLE `iplogs`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=57818;

--
-- AUTO_INCREMENT for table `test`
--
ALTER TABLE `test`
  MODIFY `id` tinyint(4) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
